# File: ./disko.nix
{
  disko.devices = {
    disk = {
      main = {
        device = "/dev/sda";
        type = "disk";
        content = {
          type = "gpt";
          partitions = {
            ESP = {
              type = "EF00";
              size = "512M";
              content = {
                type = "filesystem";
                format = "vfat";
                mountpoint = "/boot";
                mountOptions = [ "umask=0077" ];
              };
            };

            swap = {
              size = "8G";
              content = {
                type = "swap";
                resumeDevice = true;
              };
            };

            root = {
              size = "100%";
              content = {
                type = "filesystem";
                format = "btrfs";
                mountpoint = "/";
              };
            };
          };
        };
      };
    };
  };
}
# File: ./flake.nix
{
  description = "NixOS configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-24.11";
    home-manager = {
      url = "github:nix-community/home-manager/release-24.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      home-manager,
      ...
    }@inputs:
    let
      system = "x86_64-linux";

      pkgs = import inputs.nixpkgs {
        inherit system;
        config.allowUnfree = true;
      };
    in
    {
      nixosConfigurations = {
        # Конфигурация для хоста msi-laptop
        msi-laptop = nixpkgs.lib.nixosSystem {
          inherit system;

          specialArgs = {
            inherit pkgs;
          };

          modules = [
            ./hosts/msi-laptop/configuration.nix
            ./nixos-modules
          ];
        };
      };

      homeConfigurations = {
        # Конфигурация HomeManager для пользователя sdev на хосте msi-laptop
        "sdev@msi-laptop" = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          modules = [
            ./hosts/msi-laptop/home.nix
            ./home-modules
          ];
        };
      };
    };
}
# File: ./hosts/msi-laptop/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/932e5339-b23a-431d-b53a-1e0bdebe8e53";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/1A7D-FBEF";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/aff040f8-3833-4cb0-8cf7-095a74d09802"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
# File: ./hosts/msi-laptop/home.nix
{ config, pkgs, ... }:

{
  home.username = "sdev";
  home.homeDirectory = "/home/sdev";
  home.stateVersion = "24.11";

  home.packages = with pkgs; [
    neofetch
    htop
  ];

  # Включение ssh и git
  ssh.enable = true;
  git.enable = true;

  # Включаем редакторы кода
  vscode.enable = true;

  # Включение браузеров из общих модулей
  firefox.enable = true;
  google-chrome.enable = true;

  programs.bash.enable = true;
}
# File: ./hosts/msi-laptop/configuration.nix
{ config, pkgs, ... }:

{
  imports = [
    ./hardware-configuration.nix
  ];

  system.stateVersion = "24.11";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "msi-laptop";
  networking.networkmanager.enable = true;

  time.timeZone = "Europe/Moscow";
  i18n.defaultLocale = "en_US.UTF-8";

  users.users.sdev = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "networkmanager"
    ];
  };

  nix = {
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };

    settings = {
      auto-optimise-store = true;
      experimental-features = [ "nix-command" "flakes" ];
    };
  };

  environment.systemPackages = with pkgs; [
    home-manager
  ];

  # Включение сервисов из общих модулей
  xserver.enable = true;
  libinput.enable = true;
}
# File: ./nixos-modules/services/xserver.nix
{ config, pkgs, lib, ... }:

{
  options = {
    xserver.enable = lib.mkEnableOption "enables xserver";
  };

  config = lib.mkIf config.xserver.enable {
    # Включение сервиса
    services.xserver.enable = true;

    # GNOME
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;

    # Указываем видеодрайвер
    services.xserver.videoDrivers = [ "nvidia" ];
    hardware.nvidia = {
      # Использование проприетарного драйвера
      open = false;

      # Включение поддержки NVIDIA
      modesetting.enable = true;

      # Включение поддержки гибридной графики
      prime = {
        sync.enable = true;
       
        # Inter GPU
        intelBusId = "PCI:0:2:0";
        # NVIDIA GPU
        nvidiaBusId = "PCI:46:0:0";
      };

      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };

    # Раскладка клавиатуры
    services.xserver.xkb.layout = "us,ru";
    services.xserver.xkb.options = "grp:alt_shift_toggle";
  };
}
# File: ./nixos-modules/services/libinput.nix
{ config, pkgs, lib, ... }:

{
  options = {
    libinput.enable = lib.mkEnableOption "enables libinput";
  };

  config = lib.mkIf config.libinput.enable {
    # Поддержка тачпада
    services.libinput.enable = true;
  };
}
# File: ./nixos-modules/default.nix
{ ... }:

{
  imports = [
    ./services/libinput.nix
    ./services/xserver.nix
  ];
}
# File: ./home-modules/browsers/google-chrome.nix
{ config, pkgs, lib, ... }:

{
  options = {
    google-chrome.enable = lib.mkEnableOption "enables google-chrome";
  };

  config = lib.mkIf config.google-chrome.enable {
    home.packages = with pkgs; [
      google-chrome
    ];
  };
}
# File: ./home-modules/browsers/firefox.nix
{ config, pkgs, lib, ... }:

{
  options = {
    firefox.enable = lib.mkEnableOption "enables firefox";
  };

  config = lib.mkIf config.firefox.enable {
    programs.firefox.enable = true;
  };
}
# File: ./home-modules/editors/vscode/vscode.nix
{ config, pkgs, lib, ... }:

{
  options = {
    vscode.enable = lib.mkEnableOption "enables VSCode";
  };

  config = lib.mkIf config.vscode.enable {
    programs.vscode = {
      enable = true;

      extensions = with pkgs.vscode-extensions; [
        # Языки и фреймворки
        golang.go # Go
        rust-lang.rust-analyzer # Rust
        ms-python.python # Python
        ms-python.vscode-pylance # Python (Pylance)
        vue.volar # Vue
        svelte.svelte-vscode # Svelte
        astro-build.astro-vscode # Astro
        prisma.prisma # Prisma
        nrwl.angular-console # Angular

        # Инструменты разработки
        dbaeumer.vscode-eslint # ESLint
        esbenp.prettier-vscode # Prettier
        stylelint.vscode-stylelint # Stylelint
        ms-azuretools.vscode-docker # Docker
        ms-vscode.makefile-tools # Makefile
        redhat.vscode-yaml # YAML
        tamasfe.even-better-toml # TOML
        shanoor.vscode-nginx # Nginx
        slevesque.shader # Shader
        racczzalan.webgl-glsl-editor # WebGL GLSL
        vadimcn.vscode-lldb # LLDB (отладка C/C++/Rust)
        probe-rs.probe-rs-debugger # Probe-rs (отладка Rust для embedded)

        # Git и GitHub
        eamodio.gitlens # GitLens
        mhutchie.git-graph # Git Graph
        me-dutour-mathieu.vscode-github-actions # GitHub Actions

        # UI и иконки
        pkief.material-icon-theme # Material Icon Theme
        wix.vscode-import-cost # Import Cost (размер импортов)
        yoavbls.pretty-ts-errors # Pretty TypeScript Errors

        # Дополнительные инструменты
        adpyke.codesnap # CodeSnap (скриншоты кода)
        adpyke.vscode-sql-formatter # SQL Formatter
        davidanson.vscode-markdownlint # Markdown Lint
        ms-vscode.hexeditor # Hex Editor
        ms-vsliveshare.vsliveshare # Live Share
        rangav.vscode-thunder-client # Thunder Client (HTTP-клиент)
        yzane.markdown-pdf # Markdown to PDF
        medo64.render-crlf # Render CRLF
        mkxml.vscode-filesize # File Size
        lior-chamla.google-fonts # Google Fonts
      ];
    };

    home.file.".config/Code/User/settings.json".source = ./vscode/settings.json;
    home.file.".config/Code/User/keybindings.json".source = ./vscode/keybindings.json;
  };
}
# File: ./home-modules/default.nix
{ ... }:

{
  imports = [
    ./browsers/firefox.nix
    ./browsers/google-chrome.nix
    ./dev/git.nix
    ./dev/ssh.nix
    ./editors/vscode/vscode.nix
  ];
}
# File: ./home-modules/dev/git.nix
{ config, lib, ... }:

{
  options = {
    git.enable = lib.mkEnableOption "enables git";
  };

  config = lib.mkIf config.git.enable {
    programs.git = {
      enable = true;
      userName = "TUTOR03";
      userEmail = "stukalov.dev@gmail.com";

      extraConfig = {
        init.defaultBranch = "master";
      };

      includes = [
        {
          condition = "hasconfig:remote.*.url:git@github.com:**";
          contents = {
            core.sshCommand = "ssh -i ~/.ssh/id_rsa_msi_laptop_github";
          };
        }
      ];
    };
  };
}
# File: ./home-modules/dev/ssh.nix
{ config, lib, ... }:

{
  options = {
    ssh.enable = lib.mkEnableOption "enables ssh";
  };

  config = lib.mkIf config.ssh.enable {
    programs.ssh = {
      enable = true;
    };

    home.activation.setupSshKeys = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      chmod 600 ~/.ssh/id_rsa_*
    '';
  };
}
