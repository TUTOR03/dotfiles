# File: ./flake.nix
{
  description = "NixOS configuration";

  inputs = {
    nixpkgs.url = "github:nixos/nixpkgs/nixos-24.11";
    home-manager = {
      url = "github:nix-community/home-manager/release-24.11";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    rust-overlay = {
      url = "github:oxalica/rust-overlay";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    vscode-extensions = {
      url = "github:nix-community/nix-vscode-extensions";
      inputs.nixpkgs.follows = "nixpkgs";
    };
    hyprland = {
      url = "github:hyprwm/Hyprland";
      inputs.nixpkgs.follows = "nixpkgs";
    };
  };

  outputs =
    {
      self,
      nixpkgs,
      home-manager,
      rust-overlay,
      vscode-extensions,
      ...
    }@inputs:
    let
      system = "x86_64-linux";

      pkgs = import inputs.nixpkgs {
        inherit system;
        config.allowUnfree = true;
        overlays = [ 
          rust-overlay.overlays.default
          vscode-extensions.overlays.default
          (final: prev: {
            hyprland = inputs.hyprland.packages.${system}.hyprland;
          })
        ];
      };
    in
    {
      nixosConfigurations = {
        # Конфигурация для хоста msi-laptop
        msi-laptop = nixpkgs.lib.nixosSystem {
          inherit system;

          specialArgs = {
            inherit pkgs;
          };

          modules = [
            ./hosts/msi-laptop/configuration.nix
            ./nixos-modules
          ];
        };
      };

      homeConfigurations = {
        # Конфигурация HomeManager для пользователя sdev на хосте msi-laptop
        "sdev@msi-laptop" = home-manager.lib.homeManagerConfiguration {
          inherit pkgs;

          modules = [
            ./hosts/msi-laptop/home.nix
            ./home-modules
          ];
        };
      };
    };
}
# File: ./hosts/msi-laptop/hardware-configuration.nix
# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{ config, lib, pkgs, modulesPath, ... }:

{
  imports =
    [ (modulesPath + "/installer/scan/not-detected.nix")
    ];

  boot.initrd.availableKernelModules = [ "xhci_pci" "thunderbolt" "nvme" "usb_storage" "sd_mod" "rtsx_pci_sdmmc" ];
  boot.initrd.kernelModules = [ ];
  boot.kernelModules = [ "kvm-intel" ];
  boot.extraModulePackages = [ ];

  fileSystems."/" =
    { device = "/dev/disk/by-uuid/932e5339-b23a-431d-b53a-1e0bdebe8e53";
      fsType = "ext4";
    };

  fileSystems."/boot" =
    { device = "/dev/disk/by-uuid/1A7D-FBEF";
      fsType = "vfat";
      options = [ "fmask=0077" "dmask=0077" ];
    };

  swapDevices =
    [ { device = "/dev/disk/by-uuid/aff040f8-3833-4cb0-8cf7-095a74d09802"; }
    ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.wlo1.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.intel.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
# File: ./hosts/msi-laptop/home.nix
{ config, pkgs, ... }:

{
  home.username = "sdev";
  home.homeDirectory = "/home/sdev";
  home.stateVersion = "24.11";

  home.packages = with pkgs; [
    neofetch
    htop
    nerdfonts
  ];

  # Включение ssh и git
  ssh = {
    enable = true;
    keys = [
      "~/.ssh/id_rsa_msi_laptop_github"
    ];
  };
  git = {
    enable = true;
    sshKeyPathGithub = "~/.ssh/id_rsa_msi_laptop_github";
  };

  # Включаем редакторы кода
  vscode.enable = true;

  # Включаем языки
  nodejs = {
    enable = true;
    versions = with pkgs; [ nodejs_20 ];
  };
  rust.enable = true;

  # Включаем браузеры
  firefox.enable = true;
  google-chrome.enable = true;

  # Включаем VLC плеер
  vlc.enable = true;

  # Включаем Steam
  steam.enable = true;

  programs.bash = {
    enable = true;
    shellAliases = {
      cls = "clear";
      rebuild = "sudo nixos-rebuild switch --flake ${config.home.homeDirectory}/dotfiles#msi-laptop";
      rebuild-home = "home-manager switch --flake ${config.home.homeDirectory}/dotfiles#sdev@msi-laptop";
      nix-gc = "sudo nix-collect-garbage";
      nix-gc-boot = ''
        sudo nix-collect-garbage --delete-older-than 7d && \
        sudo nix profile wipe-history --profile /nix/var/nix/profiles/system --older-than 7d && \
        sudo /run/current-system/bin/switch-to-configuration boot
      '';
      hypr-reload = ''
        pkill waybar && \
        hyprctl reload && \
        waybar & disown
      '';
    };
  };

  # Включаем Hyprland
  hyprland.enable = true;

  fonts.fontconfig.enable = true;

  # Настройка программ по умолчанию
  xdg.mimeApps = {
    enable = true;
    defaultApplications = {
      # Видео открываются в VLC
      "video/mp4" = "vlc.desktop";
      "video/mpeg" = "vlc.desktop";
      "video/x-matroska" = "vlc.desktop";
      "video/webm" = "vlc.desktop";
      "video/avi" = "vlc.desktop";
      "video/quicktime" = "vlc.desktop";

      # Браузер по умолчанию для HTTP/HTTPS/HTML
      "x-scheme-handler/http" = "google-chrome.desktop";
      "x-scheme-handler/https" = "google-chrome.desktop";
      "text/html" = "google-chrome.desktop";
      "application/xhtml+xml" = "google-chrome.desktop";
    };
  };

  # Переменные окружения
  home.sessionVariables = {
    BROWSER = "google-chrome";
    DEFAULT_BROWSER = "google-chrome";
    NIXOS_OZONE_WL = "1";
  };
}

# File: ./hosts/msi-laptop/configuration.nix
{ config, pkgs, ... }:

{
  imports = [
    ./hardware-configuration.nix
  ];

  system.stateVersion = "24.11";

  boot.loader.systemd-boot.enable = true;
  boot.loader.efi.canTouchEfiVariables = true;

  networking.hostName = "msi-laptop";
  networking.networkmanager.enable = true;

  time.timeZone = "Europe/Moscow";
  i18n.defaultLocale = "en_US.UTF-8";

  hardware.graphics = {
    enable = true;
    enable32Bit = true;
  };

  programs.gamemode = {
    enable = true;
    settings = {
      general = {
        renice = 10;
      };
      gpu = {
        apply_gpu_optimisations = "accept";
        gpu_device = 0;
      };
    };
  };

  users.users.sdev = {
    isNormalUser = true;
    extraGroups = [
      "wheel"
      "networkmanager"
      "gamemode"
    ];
  };

  nix = {
    gc = {
      automatic = true;
      dates = "weekly";
      options = "--delete-older-than 7d";
    };

    settings = {
      auto-optimise-store = true;
      experimental-features = [ "nix-command" "flakes" ];
    };
  };

  environment.systemPackages = with pkgs; [
    home-manager
  ];

  # Если хотим использовать XServer
  xserver.enable = false;

  # Если хотим использовать Hyprland
  hyprland = {
    enable = true;
    user = "sdev";
  };

  # Включение сервисов из общих модулей
  libinput.enable = true;
}

# File: ./output.txt

# File: ./nixos-modules/hyprland.nix
{ config, pkgs, lib, ... }:

{
  options = {
    hyprland.enable = lib.mkEnableOption "enables Hyprland";
    hyprland.user = lib.mkOption {
      type = lib.types.str;
      description = "Username to automatically log in and start Hyprland for";
    };
  };

  config = lib.mkIf config.hyprland.enable {
    programs.hyprland = {
      enable = true;
      package = pkgs.hyprland;
      xwayland.enable = true;
    };

    services.greetd = {
      enable = true;
      restart = true;
      settings = {
        default_session = {
          command = "${pkgs.hyprland}/bin/Hyprland";
          user = config.hyprland.user;
        };
      };
    };

    environment.systemPackages = with pkgs; [
      kitty
    ];
  };
}

# File: ./nixos-modules/services/xserver.nix
{ config, pkgs, lib, ... }:

{
  options = {
    xserver.enable = lib.mkEnableOption "enables xserver";
  };

  config = lib.mkIf config.xserver.enable {
    # Включение сервиса
    services.xserver.enable = true;

    # GNOME
    services.xserver.displayManager.gdm.enable = true;
    services.xserver.desktopManager.gnome.enable = true;

    # Указываем видеодрайвер
    services.xserver.videoDrivers = [ "nvidia" ];
    hardware.nvidia = {
      # Использование проприетарного драйвера
      open = false;

      # Включение поддержки NVIDIA
      modesetting.enable = true;

      # Включение поддержки гибридной графики
      prime = {
        sync.enable = true;
       
        # Inter GPU
        intelBusId = "PCI:0:2:0";
        # NVIDIA GPU
        nvidiaBusId = "PCI:46:0:0";
      };

      package = config.boot.kernelPackages.nvidiaPackages.stable;
    };

    # Раскладка клавиатуры
    services.xserver.xkb.layout = "us,ru";
    services.xserver.xkb.options = "grp:alt_shift_toggle";
  };
}
# File: ./nixos-modules/services/libinput.nix
{ config, pkgs, lib, ... }:

{
  options = {
    libinput.enable = lib.mkEnableOption "enables libinput";
  };

  config = lib.mkIf config.libinput.enable {
    # Поддержка тачпада
    services.libinput.enable = true;
  };
}
# File: ./nixos-modules/default.nix
{ ... }:

{
  imports = [
    ./services/libinput.nix
    ./services/xserver.nix
    ./hyprland.nix
  ];
}
# File: ./home-modules/games/steam.nix
{ config, lib, pkgs, ... }:

{
  options = {
    steam.enable = lib.mkEnableOption "enables Steam with Proton support";
  };

  config = lib.mkIf config.steam.enable {
    home.packages = with pkgs; [
      steam
      protonup-qt
      mangohud
      gamemode
    ];

    home.sessionVariables = {
      STEAM_EXTRA_COMPAT_TOOLS_PATHS = "${config.home.homeDirectory}/.steam/root/compatibilitytools.d";
    };

    home.activation.installProtonGE = lib.hm.dag.entryAfter ["writeBoundary"] ''
      if [ ! -d "${config.home.homeDirectory}/.steam/root/compatibilitytools.d" ]; then
        ${pkgs.protonup-qt}/bin/protonup-qt --install-dir "${config.home.homeDirectory}/.steam/root/compatibilitytools.d" --no-gui --install proton-ge
      fi
    '';
  };
}
# File: ./home-modules/langs/nodejs.nix
{ config, lib, pkgs, ... }:

{
  options = {
    nodejs.enable = lib.mkEnableOption "enables NodeJS";
    nodejs.versions = lib.mkOption {
      type = lib.types.listOf lib.types.package;
      default = [ pkgs.nodejs_20 ];
      description = "List of Node.js versions to install";
    };
  };

  config = lib.mkIf config.nodejs.enable {
    home.packages = lib.flatten (
      lib.forEach config.nodejs.versions (pkg: [
        pkg
        pkgs.yarn
        pkgs.pnpm
      ])
    );

    # Алиасы для конкретных версий
    programs.bash.shellAliases = let
      mkAlias = cmd: pkg: pathPkg: {
        name = "${cmd}_${pkg.version}";
        value = "${pathPkg}/bin/${cmd}";
      };
    in lib.listToAttrs (
      (lib.forEach config.nodejs.versions (pkg: mkAlias "node" pkg pkg)) ++
      (lib.forEach config.nodejs.versions (pkg: mkAlias "npm" pkg pkg)) ++
      (lib.forEach config.nodejs.versions (pkg: mkAlias "yarn" pkg pkgs.yarn)) ++
      (lib.forEach config.nodejs.versions (pkg: mkAlias "pnpm" pkg pkgs.pnpm))
    );
  };
}
# File: ./home-modules/langs/rust.nix
{ config, lib, pkgs, ... }:

let
  stableRust = pkgs.rust-bin.stable.latest.default.override {
    extensions = [ "rust-src" "rust-analyzer" "clippy" ];
  };
in {
  options = {
    rust.enable = lib.mkEnableOption "enables Rust";
  };

  config = lib.mkIf config.rust.enable {
    home.packages = [
      stableRust
      pkgs.cargo-watch
      pkgs.cargo-edit
    ];

    programs.bash.shellAliases = {
      rustc = "${stableRust}/bin/rustc";
      cargo = "${stableRust}/bin/cargo";
    };
  };
}

# File: ./home-modules/code-editors/vscode/vscode.nix
{ config, pkgs, lib, ... }:

{
  options = {
    vscode.enable = lib.mkEnableOption "enables VSCode";
  };

  config = lib.mkIf config.vscode.enable {
    programs.vscode = {
      enable = true;

      extensions = with pkgs.vscode-marketplace; [
        # Rust
        rust-lang.rust-analyzer

        # Go
        golang.go
        
        # Python
        ms-python.python
        ms-python.vscode-pylance
        ms-python.black-formatter
        ms-python.debugpy
        ms-python.isort
        
        # Svelte
        svelte.svelte-vscode
        
        # Nix
        bbenoist.nix
        
        # Поддержка форматов файлов
        redhat.vscode-yaml
        tamasfe.even-better-toml
        jock.svg
        shanoor.vscode-nginx
        tomoki1207.pdf
        davidanson.vscode-markdownlint
        yzane.markdown-pdf

        # Утилиты
        dbaeumer.vscode-eslint
        esbenp.prettier-vscode
        ms-azuretools.vscode-docker
        ms-vscode.makefile-tools
        vadimcn.vscode-lldb
        eamodio.gitlens
        mhutchie.git-graph
        adpyke.codesnap
        ms-vscode.hexeditor
        ms-vsliveshare.vsliveshare
        ms-vscode-remote.remote-containers
        ms-vscode-remote.remote-ssh
        ms-vscode-remote.remote-ssh-edit
        ms-vscode-remote.remote-wsl
        ms-vscode.remote-explorer
        ms-playwright.playwright

        # UI расширения
        pkief.material-icon-theme
        wix.vscode-import-cost
        yoavbls.pretty-ts-errors
      ];
    };

    home.file.".config/Code/User/settings.json".source = ./settings.json;
    home.file.".config/Code/User/keybindings.json".source = ./keybindings.json;
  };
}

# File: ./home-modules/code-editors/vscode/keybindings.json

# File: ./home-modules/code-editors/vscode/settings.json
{
  // Форматирование и Prettier
  "prettier.useTabs": false,
  "prettier.semi": false,
  "prettier.jsxSingleQuote": true,
  "prettier.singleQuote": true,
  "prettier.arrowParens": "always",
  "editor.formatOnSave": true,
  "editor.formatOnPaste": false,
  "editor.defaultFormatter": "esbenp.prettier-vscode",
  "editor.tabSize": 2,

  // Внешний вид редактора
  "editor.fontSize": 16,
  "editor.fontFamily": "JetBrainsMono Nerd Font, JetBrains Mono",
  "editor.wordWrap": "on",
  "editor.unicodeHighlight.ambiguousCharacters": false,
  "editor.cursorBlinking": "expand",
  "editor.glyphMargin": true,
  "editor.linkedEditing": true,
  "editor.padding.top": 16,
  "editor.occurrencesHighlight": "off",
  "editor.acceptSuggestionOnEnter": "off",
  "editor.quickSuggestions": {
    "other": true,
    "comments": false,
    "strings": false
  },
  "editor.unicodeHighlight.allowedLocales": {
    "en": true,
    "ru": true
  },
  "editor.detectIndentation": false,
  "editor.codeActionsOnSave": {
    "source.fixAll.eslint": "explicit",
    "source.fixAll.stylelint": "explicit"
  },
  "editor.inlayHints.enabled": "offUnlessPressed",
  "editor.renderWhitespace": "none",
  "editor.stickyScroll.enabled": false,
  "explorer.compactFolders": false,
  "explorer.confirmDelete": false,
  "explorer.confirmDragAndDrop": false,
  "window.titleBarStyle": "custom",
  "workbench.colorTheme": "Monokai",
  "workbench.iconTheme": "material-icon-theme",
  "workbench.startupEditor": "none",

  // Терминал
  "terminal.integrated.cursorBlinking": true,
  "terminal.integrated.fontSize": 16,

  // Навигация (Breadcrumbs)
  "breadcrumbs.icons": true,
  "breadcrumbs.showKeys": true,
  "breadcrumbs.showFiles": true,
  "breadcrumbs.symbolPath": "on",
  "breadcrumbs.showArrays": true,
  "breadcrumbs.showBooleans": true,
  "breadcrumbs.showClasses": true,
  "breadcrumbs.showConstants": true,
  "breadcrumbs.showConstructors": true,
  "breadcrumbs.showEnumMembers": true,
  "breadcrumbs.showEvents": true,
  "breadcrumbs.showFields": true,
  "breadcrumbs.showEnums": true,
  "breadcrumbs.showFunctions": true,
  "breadcrumbs.showInterfaces": true,
  "breadcrumbs.showMethods": true,
  "breadcrumbs.showModules": true,
  "breadcrumbs.showNamespaces": true,
  "breadcrumbs.showNull": true,
  "breadcrumbs.showNumbers": true,
  "breadcrumbs.showObjects": true,
  "breadcrumbs.showOperators": true,
  "breadcrumbs.showPackages": true,
  "breadcrumbs.showProperties": true,
  "breadcrumbs.showStrings": true,
  "breadcrumbs.showStructs": true,
  "breadcrumbs.showTypeParameters": true,
  "breadcrumbs.showVariables": true,

  // SSH
  "remote.SSH.remotePlatform": {
    "adm512": "linux",
    "adm512_raw": "linux",
    "10.0.20.5": "linux"
  },
  "remote.SSH.serverPickPortsFromRange": {
    "adm512": "8000-8000",
    "adm512_raw": "8000-8000"
  },
  "remote.SSH.remoteServerListenOnSocket": false,
  "remote.SSH.useExecServer": false,
  "remote.SSH.useLocalServer": false,
  "remote.SSH.enableDynamicForwarding": false,
  "remote.SSH.enableAgentForwarding": false,
  "remote.SSH.localServerDownload": "always",
  "remote.SSH.connectTimeout": 60,

  // Git
  "git.mergeEditor": false,
  "gitlens.views.remotes.branches.layout": "list",

  // JSON
  "json.schemaDownload.enable": true,
  "http.proxySupport": "fallback",

  // Markdown
  "markdown-pdf.displayHeaderFooter": false,

  // Rust
  "[rust]": {
    "editor.tabSize": 2,
    "editor.defaultFormatter": "rust-lang.rust-analyzer"
  },
  "rust-analyzer.rustfmt.extraArgs": [
    "--config",
    "tab_spaces=2,hard_tabs=false,max_width=100"
  ],
  "rust-analyzer.inlayHints.chainingHints.enable": false,
  "rust-analyzer.inlayHints.closingBraceHints.enable": false,
  "rust-analyzer.completion.callable.snippets": "none",
  "rust-analyzer.check.command": "clippy",

  // CSS/SCSS
  "stylelint.validate": ["css", "scss"],

  // JavaScript/TypeScript
  "typescript.suggest.paths": false,
  "javascript.suggest.paths": false,
  "javascript.preferences.importModuleSpecifier": "non-relative",
  "typescript.preferences.importModuleSpecifier": "non-relative",
  "emmet.includeLanguages": {
    "javascript": "javascriptreact",
    "typescript": "typescriptreact"
  },
  "typescript.inlayHints.enumMemberValues.enabled": true,
  "typescript.inlayHints.functionLikeReturnTypes.enabled": true,
  "typescript.inlayHints.parameterNames.enabled": "all",
  "typescript.inlayHints.variableTypes.enabled": true,
  "[typescript]": {
    "editor.defaultFormatter": "esbenp.prettier-vscode"
  },
  "typescript.referencesCodeLens.showOnAllFunctions": true,
  "typescript.referencesCodeLens.enabled": true,
  "javascript.referencesCodeLens.showOnAllFunctions": true,
  "javascript.referencesCodeLens.enabled": true,

  // Svelte
  "svelte.ask-to-enable-ts-plugin": false,
  "svelte.enable-ts-plugin": true,
  "[svelte]": {
    "editor.defaultFormatter": "svelte.svelte-vscode"
  },

  // PHP
  "php.format.codeStyle": "K&R",
  "php.format.rules.alignConsecutiveAssignments": true,
  "[php]": {
    "editor.defaultFormatter": "DEVSENSE.phptools-vscode",
    "editor.formatOnSave": false,
    "editor.tabSize": 2
  },

  // Python
  "[python]": {
    "editor.defaultFormatter": "ms-python.black-formatter",
    "editor.formatOnSave": true,
    "editor.tabSize": 4
  },

  // Go
  "go.inlayHints.assignVariableTypes": true,
  "go.inlayHints.constantValues": true,
  "go.inlayHints.parameterNames": true,
  "go.inlayHints.functionTypeParameters": true,
  "go.inlayHints.rangeVariableTypes": true,
  "[go]": {
    "editor.defaultFormatter": "golang.go",
    "editor.formatOnSave": true
  },

  // Разное
  "security.workspace.trust.untrustedFiles": "open",
  "nxConsole.showNodeVersionOnStartup": false,
  "files.watcherExclude": {
    "**/.git/objects/**": true,
    "**/node_modules/**": true
  },
  "search.exclude": {
    "**/node_modules": true
  },
  "typescript.tsserver.maxTsServerMemory": 4096,
  "diffEditor.codeLens": true,
  "chat.commandCenter.enabled": false,

  // SVG
  "[svg]": {
    "editor.defaultFormatter": "jock.svg"
  },

  // Hex Editor
  "hexeditor.columnWidth": 16,
  "hexeditor.showDecodedText": true,
  "hexeditor.defaultEndianness": "little",
  "hexeditor.inspectorType": "aside",

  // Telemetry
  "redhat.telemetry.enabled": false
}

# File: ./home-modules/browsers/google-chrome.nix
{ config, pkgs, lib, ... }:

{
  options = {
    google-chrome.enable = lib.mkEnableOption "enables google-chrome";
  };

  config = lib.mkIf config.google-chrome.enable {
    home.packages = with pkgs; [
      google-chrome
    ];
  };
}
# File: ./home-modules/browsers/firefox.nix
{ config, pkgs, lib, ... }:

{
  options = {
    firefox.enable = lib.mkEnableOption "enables firefox";
  };

  config = lib.mkIf config.firefox.enable {
    programs.firefox.enable = true;
  };
}
# File: ./home-modules/media/vlc.nix
{ config, lib, pkgs, ... }:

{
  options = {
    vlc.enable = lib.mkEnableOption "enables VLC media player";
  };

  config = lib.mkIf config.vlc.enable {
    home.packages = with pkgs; [
      vlc
    ];
  };
}
# File: ./home-modules/desktops/hyprland/rofi/theme.rasi

# File: ./home-modules/desktops/hyprland/waybar/style.css
* {
  font-family: JetBrainsMono Nerd Font;
  font-size: 14px;
}

window#waybar {
  all: unset;
  color: #f8f8f2;
  background: #3e3d32;
}

.modules-left,
.modules-center,
.modules-right {
  padding: 6px;
}

#workspaces {
  all: unset;
}

#workspaces button {
  all: unset;
  padding: 0 6px;
}

#workspaces button:hover {
  color: #878b91;
}

#workspaces button.active {
  color: #a6e22e;
}

#cpu,
#memory,
#network,
#battery {
  padding: 0 4px;
}

# File: ./home-modules/desktops/hyprland/waybar/config.jsonc
{
  "layer": "top",
  "position": "top",
  "margin": "0",
  "spacing": 8,

  "modules-left": ["clock"],
  "modules-center": ["hyprland/workspaces"],
  "modules-right": ["cpu", "memory", "network", "battery"],

  "clock": {
    "format": "{:%d-%m-%Y %H:%M}",
    "interval": 60
  },

  "tray": {
    "icon-size": 16,
    "spacing": 4
  },

  "hyprland/workspaces": {
    "format": "{icon}",
    "format-icons": {
      "active": "",
      "default": "",
      "empty": ""
    },
    "persistent-workspaces": {
      "*": 3
    }
  },

  "cpu": {
    "interval": 30,
    "format": " {usage}%",
    "tooltip": true
  },

  "memory": {
    "interval": 30,
    "format": " {percentage}%",
    "tooltip": true
  },

  "network": {
    "interval": 30,
    "format-wifi": "󰖩 {essid}({signalStrength}%)",
    "format-ethernet": "󰌗 {ipaddr}/{cidr}",
    "format-disconnected": "󰖪"
  },

  "battery": {
    "interval": 30,
    "format": "{icon} {capacity}%",
    "format-charging": "󰂄 {capacity}%",
    "format-plugged": " {capacity}%",
    "format-icons": ["󰁻", "󰁼", "󰁾", "󰂀", "󰂂", "󰁹"]
  }
}

# File: ./home-modules/desktops/hyprland/hyprland.nix
{ config, lib, pkgs, ... }:

let
  cursorTheme = "Notwaita-Black";
  cursorSize = "22";
in {
  options = {
    hyprland.enable = lib.mkEnableOption "enables Hyprland";
  };

  config = lib.mkIf config.hyprland.enable {
    home.packages = with pkgs; [
      waybar
      hyprcursor
      rofi-wayland
    ];

    home.file.".local/share/icons/${cursorTheme}".source = ./cursors/${cursorTheme};
    
    # Hyprland
    wayland.windowManager.hyprland = {
      enable = true;
      settings = {
        "$mod" = "SUPER";

        env = [
          "XCURSOR_THEME,${cursorTheme}"
          "XCURSOR_SIZE,${cursorSize}"
        ];

        exec-once = [
          "waybar"
          "hyprctl setcursor ${cursorTheme} ${cursorSize}"
        ];

        cursor = {
          enable_hyprcursor = true;
        };
        
        bindm = [
          "$mod, mouse:272, movewindow"
          "$mod, mouse:273, resizewindow"
          "$mod ALT, mouse:272, resizewindow"
        ];
        
        bind = [
          "$mod, Q, killactive"
          "$mod, T, exec, kitty"
          "$mod, F, fullscreen"
          "$mod, R, exec, rofi -show drun"
          "$mod, 1, workspace, 1"
          "$mod, 2, workspace, 2"
          "$mod, 3, workspace, 3"
          "$mod SHIFT, 1, movetoworkspace, 1"
          "$mod SHIFT, 2, movetoworkspace, 2"
          "$mod SHIFT, 3, movetoworkspace, 3"
          "$mod ALT, left, workspace, -1"
          "$mod ALT, right, workspace, +1"
          "$mod, left, movefocus, l"
          "$mod, down, movefocus, d"
          "$mod, up, movefocus, u"
          "$mod, right, movefocus, r"
        ];

        workspace = [
          "1, default:true"
          "2, default:true"
          "3, default:true"
        ];

        monitor = ",preferred,auto,1";

        general = {
          border_size = 1;
          gaps_in = 4;
          gaps_out = 0;
          gaps_workspaces = 0;
          "col.inactive_border"="rgb(f8f8f2)";
          "col.active_border"="rgb(a6e22e)";
          resize_on_border = false;
          extend_border_grab_area = 10;
          hover_icon_on_border = false;
        };

        decoration = {
          rounding = 10;
          rounding_power = 2.0;

          blur = {
            enabled = false;
          };

          shadow = {
            enabled = false;
          };
        };
      };
    };

    # Waybar
    home.file.".config/waybar/config.jsonc".source = config.lib.file.mkOutOfStoreSymlink ./waybar/config.jsonc;
    home.file.".config/waybar/style.css".source = config.lib.file.mkOutOfStoreSymlink ./waybar/style.css ;

    programs.waybar = {
      enable = true;
    };

    # Rofi
    # home.file.".config/rofi/theme.rasi".source = ./rofi/theme.rasi;
    
    programs.rofi = {
      enable = true;
      package = pkgs.rofi-wayland;
      extraConfig = {
        modi = "drun";
        font = "JetBrainsMono Nerd Font SemiBold 14";
        location = 0;
	      yoffset = 0;
	      xoffset = 0;
        display-drun = "App:";
        show-icons = true;
        # theme = ./rofi/theme.rasi;
      };
    };
  };
}
# File: ./home-modules/others/git.nix
{ config, lib, ... }:

{
  options = {
    git.enable = lib.mkEnableOption "enables git";
    git.sshKeyPathGithub = lib.mkOption {
      type = lib.types.str;
      default = "";
      description = "Path to SSH key for GitHub";
    };
  };

  config = lib.mkIf config.git.enable {
    programs.git = {
      enable = true;
      userName = "TUTOR03";
      userEmail = "stukalov.dev@gmail.com";

      extraConfig = {
        init.defaultBranch = "master";
      };

      includes = lib.mkIf (config.git.sshKeyPathGithub != "") [
        {
          condition = "hasconfig:remote.*.url:git@github.com:**";
          contents = {
            core.sshCommand = "ssh -i ${config.git.sshKeyPathGithub}";
          };
        }
      ];
    };
  };
}
# File: ./home-modules/others/ssh.nix
{ config, lib, ... }:

{
  options = {
    ssh.enable = lib.mkEnableOption "enables ssh";
    ssh.keys = lib.mkOption {
      type = lib.types.listOf lib.types.str;
      default = [];
      description = "List of paths to SSH private keys to be added to ssh-agent";
    };
  };

  config = lib.mkIf config.ssh.enable {
    programs.ssh = {
      enable = true;
      addKeysToAgent = "yes";
      extraConfig = lib.concatStringsSep "\n" (
        map (key: "IdentityFile ${key}") config.ssh.keys
      );
    };

    home.activation.setupSshKeys = config.lib.dag.entryAfter [ "writeBoundary" ] ''
      chmod 600 ~/.ssh/id_rsa_*
    '';
  };
}
# File: ./home-modules/default.nix
{ ... }:

{
  imports = [
    # Browsers
    ./browsers/firefox.nix
    ./browsers/google-chrome.nix
    # Code-editors
    ./code-editors/vscode/vscode.nix
    # Langs
    ./langs/nodejs.nix
    ./langs/rust.nix
    # Media
    ./media/vlc.nix
    # Games
    ./games/steam.nix
    # Desktops
    ./desktops/hyprland/hyprland.nix
    ./others/git.nix
    ./others/ssh.nix
  ];
}
